# -*- coding: utf-8 -*-
"""EDA_Session_3_Categorical_Data_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-SiOrToyc2510rpPqMXbZG6OiyAmIhmv
"""

# Read the pacakages
# Read the data
# cat and numerical

"""**Import the required packages**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""**Read the data**"""

visa_df=pd.read_csv("Visadataset.csv")
visa_df.head()

"""**Divide into categorical and Numerical columns**"""

types=dict(visa_df.dtypes)
cat_columns=[key for key,value in types.items() if value=='object']
num_columns=[key for key,value in types.items() if value!='object']

cat_columns=visa_df.select_dtypes(include='object').columns
num_columns=visa_df.select_dtypes(exclude='object').columns
cat_columns

"""**How to select a specific columns**"""

visa_df['continent']  # Series type

visa_df[['continent']]  # dataframe

visa_df.continent  # Series

visa_df.loc[:,['continent']]

visa_df['continent']  # Series type
visa_df[['continent']]  # dataframe
visa_df.continent  # Series
visa_df.loc[:,['continent']]

"""**Read the multiple columns**

- whenever we see multiple means recall the list

- keep the columns in list

- pass that list
"""

cols=['continent','case_status']
visa_df[cols]

"""$task-1$

**we want to find the number of applicants continent wise**

- There is an Asia continent is there

- How many applicants are from Asis out of 25480

**Unique**

- unique will provide how many unique items are there in a particular column
"""

visa_df['continent'].unique()

len(visa_df['continent'].unique())

"""**nunique**

- gives count of unique items
"""

visa_df['continent'].nunique()

What is difference between len(unique) and nunique
len(visa_df['continent'].unique())
visa_df['continent'].nunique()
max()
len()
min()
sum()

# Step-1: Read the data with specific column
# Step-2: Apply the condition
#         when we apply the condition python will give True and False
# Step-3: In order to retrive the True data
#         dataframe_name[con]
visa_df['continent']
con=visa_df['continent']=='Asia'
len(visa_df[con])

con=visa_df['continent']=='Asia'
len(visa_df[con])

len(visa_df[visa_df['continent']=='Asia'])

con=visa_df['continent']=='Asia'
len(visa_df[con])

con=visa_df['continent']=='Africa'
len(visa_df[con])

con=visa_df['continent']=='North America'
len(visa_df[con])

con=visa_df['continent']=='Europe'
len(visa_df[con])

con=visa_df['continent']=='South America'
len(visa_df[con])

con=visa_df['continent']=='Oceania'
len(visa_df[con])

con=visa_df['continent']==i
len(visa_df[con])

for i in visa_df['continent'].unique():
    con=visa_df['continent']==i
    count=len(visa_df[con])
    print(f"The number of applicants from {i} is: {count}")

"""$task-2$

- Now instead of print count , take empty list

- Save the values in a empty list

- we already has unique continent list

- we also having count list

- Create a dataframe
"""

continents=visa_df['continent'].unique()

count=[]
for i in visa_df['continent'].unique():
    con=visa_df['continent']==i
    count.append(len(visa_df[con]))

cols=['Continents','Number of Applicants']
continents_df=pd.DataFrame(zip(continents,count),
                columns=cols)
continents_df.to_csv('continents_df.csv',index=False)

"""**Value counts**"""

visa_df['continent'].value_counts()

"""- we created a dataframe of unique values of a columns and its count

- We created by our own way, by using for loop

- The same operation we can get using **value_counts**
"""

cdf=visa_df['continent'].value_counts()
cdf

dir(cdf)

type(cdf)

keys=cdf.keys()

values=cdf.values

pd.DataFrame(zip(keys,values))

cdf=visa_df['continent'].value_counts()
keys=cdf.keys()
values=cdf.values
cols=['Lables','Count']
df=pd.DataFrame(zip(keys,values),
             columns=cols)
df.to_csv('Continent.csv',index=False)

cat_columns[1:]

cdf=visa_df['education_of_employee'].value_counts()
keys=cdf.keys()
values=cdf.values
cols=['Lables','Count']
df=pd.DataFrame(zip(keys,values),
             columns=cols)
df.to_csv('education_of_employee.csv',index=False)

"""- we need to change column name

- we need to change save the file name as column name
"""

for i in cat_columns[1:]:
    cdf=visa_df[i].value_counts()
    keys=cdf.keys()
    values=cdf.values
    cols=['Lables','Count']
    df=pd.DataFrame(zip(keys,values),
                 columns=cols)
    path=r"C:\Users\omkar\OneDrive\Documents\Data science\Naresh IT\Naresh IT\Data science\Batches\Batch-8_May\EDA\Value_Counts_df"
    df.to_csv(f"{path}\\{i}.csv",index=False)

def valuecounts(i):
    cdf=visa_df[i].value_counts()
    keys=cdf.keys()
    values=cdf.values
    cols=['Lables','Count']
    df=pd.DataFrame(zip(keys,values),
                 columns=cols)
    path=r"C:\Users\omkar\OneDrive\Documents\Data science\Naresh IT\Naresh IT\Data science\Batches\Batch-8_May\EDA\Value_Counts_df"
    df.to_csv(f"{path}\\{i}.csv",index=False)

#visa_df[cat_columns[1:]].applymap(valuecounts)

"""**Normalize**

- Relative frequency table

- Will give percentage of lables in the column
"""

cdf=visa_df['continent'].value_counts(normalize=True)
round(cdf*100,2)

"""**Bar chart**

- Bar chart is the Graphical representation of Frequency table

- Bar graph is a plot between count and class

- In order to plot bar chart we required two columns

    - Categorical column

    - Numerical columns

- We already created a Frequency table for **continents_df**

    - Here we have cols=['Continents','Number of Applicants']

    - Categorical column is: **Continents**

    - Numerical column is : **Number of Applicants**

- Package: **matplotlib**

- We required a dataframe
"""

import matplotlib.pyplot as plt
plt.bar('Continents', # Cat column  X-axis
        'Number of Applicants', # Num column: Height Y-axis
        data=continents_df)

plt.title("Bar chart")  # Title of the graph
plt.xlabel('Continents') # X-axis name
plt.ylabel('Number of Applicants') # Y-axis name
plt.savefig('Continents_bar_chart.jpg')
plt.show() # Show will avoid the writeup and it should be at last

cdf=visa_df['continent'].value_counts(normalize=True)
cdf

visa_df['continent'] # Raw data

# Continets_df
#    For loop
#    value_counts

# Plot the bar chart: matplotlib

continents_df

"""- Many students got struggle about the dataframe

- I told very clearly whenever we open the Notebook we need to run the cells

- Yesterday we taken continent_df is a dataframe is created by us in the notebook

- we used that data frame in the bar plot

- Mistake-1: You did not run the book

- Mistake-2: Once upon a time You ran that notebook
             You saved the dataframe in the local
             You are directly providing the dataframe name

- Mistake-3
The dataframe is Avaialable means you need to read it
plt.bar('C','N',data='continents_df')

####################### Task-1##############################
- Take a Fresh Notebook
- read the visa dataset
- Create a case_status frequency table
- Save that in your laptop

- Take anoth notebook
- Perform the bar pot on case_status dataframe


##################### Task-2###########################
- Take a Fresh Notebook
- read the visa dataset
- Create a case_status frequency table
- Perform the bar pot on case_status dataframe
"""

# kindly dont do the silly
# logic is okay
# spell mistakes
# quotes
# upper case lower case
# with import packages
#  you are trying to read the data
# ask what is the error
# Omkar pls smlile

# name error ===
# ''

"""**Bar chart using Seaborn**

- We can plot bar charts using with many packages

- One package is matplotlib

- Another package is seaborn

- In matplotlib the method is **plt.bar**

- In seaborn the method is **countplot**

- In matplotlib,

    - we will take the raw data

    - we will create our frequency table i.e. dataframe

    - we will pass the Column1,Column2 and dataframe name

- In Seaborn count plot

    - It takes direct raw data

    - we will provide direct column name

    - we will provide main dataframe name



"""

visa_df.columns

# Continent column ==== continent_df ==== plt.bar
# continent column directly === visadf
import seaborn as sns
plt.figure(figsize=(8,5)) # 8 units X-axis, 5units y-axis
order_continents=['Asia','Europe','North America','South America','Africa','Oceania']
sns.countplot(data=visa_df,
             x='continent',
             order=order_continents)
plt.title('Bar chart')
plt.savefig('Continents_bar_chart_using_seaborn.jpg')
plt.show()

visa_df['continent'].value_counts().keys()

import seaborn as sns
plt.figure(figsize=(8,5)) # 8 units X-axis, 5units y-axis
order_continents=visa_df['continent'].value_counts().keys()
sns.countplot(data=visa_df,
             x='continent',
             order=order_continents)
plt.title('Bar chart')
plt.savefig('Continents_bar_chart_using_seaborn.jpg')
plt.show()

